#!/usr/bin/env bash
set -euo pipefail

. /usr/share/mc-server-tools/lib/common.sh
require_root
# Load networking config (create defaults if missing)
CONFIG_FILE="/etc/mc-server-tools/config"
if [[ ! -f "$CONFIG_FILE" ]]; then
  install -d -m 0755 /etc/mc-server-tools
  cat >"$CONFIG_FILE" <<'EOF'
BRIDGE="vmbr0"
NET_JAVA_START="192.168.205.100"
NET_JAVA_PREFIX="24"
NET_JAVA_GW="auto"
NET_BEDROCK_START="192.168.206.100"
NET_BEDROCK_PREFIX="24"
NET_BEDROCK_GW="auto"
DEFAULT_TEMPLATE=""
EOF
fi
# shellcheck disable=SC1090
. "$CONFIG_FILE"

# Default disk size in GiB for pct create (integer, no G suffix)
: "${DISK_GB:=16}"

# ----- IP math helpers -----
ip_to_int() { # $1=IPv4
  awk -v ip="$1" 'BEGIN{split(ip,a,"."); print (a[1]*16777216 + a[2]*65536 + a[3]*256 + a[4]) }'
}
int_to_ip() { # $1=int
  awk -v n="$1" 'BEGIN{a=int(n/16777216);n-=a*16777216;b=int(n/65536);n-=b*65536;c=int(n/256);n-=c*256;d=n; printf("%d.%d.%d.%d",a,b,c,d)}'
}
mask_from_prefix() { # $1=prefix -> int mask
  awk -v p="$1" 'BEGIN{m=(2^32-1)-(2^(32-p)-1); print m}'
}
network_of() { # $1=ip $2=prefix -> network ip
  awk -v ip="$1" -v p="$2" 'BEGIN{
    split(ip,a,"."); ipi=a[1]*16777216+a[2]*65536+a[3]*256+a[4];
    m=(2^32-1)-(2^(32-p)-1);
    n=and(ipi,m);
    printf("%d.%d.%d.%d", int(n/16777216)%256, int(n/65536)%256, int(n/256)%256, n%256)
  }'
}
first_host() { # $1=ip $2=prefix -> network+1
  awk -v ip="$1" -v p="$2" 'BEGIN{
    split(ip,a,"."); ipi=a[1]*16777216+a[2]*65536+a[3]*256+a[4];
    m=(2^32-1)-(2^(32-p)-1);
    n=and(ipi,m)+1;
    printf("%d.%d.%d.%d", int(n/16777216)%256, int(n/65536)%256, int(n/256)%256, n%256)
  }'
}
broadcast_of() { # $1=ip $2=prefix -> broadcast ip
  awk -v ip="$1" -v p="$2" 'BEGIN{
    split(ip,a,"."); ipi=a[1]*16777216+a[2]*65536+a[3]*256+a[4];
    m=(2^32-1)-(2^(32-p)-1);
    b=or(and(ipi,m),(2^(32-p)-1));
    printf("%d.%d.%d.%d", int(b/16777216)%256, int(b/65536)%256, int(b/256)%256, b%256)
  }'
}

ip_in_same_subnet() { # $1=ip $2=seed $3=prefix
  local net1 net2; net1=$(network_of "$1" "$3"); net2=$(network_of "$2" "$3")
  [[ "$net1" == "$net2" ]]
}

# Extract ip= value from a CT's net0, if present
ct_ip() {
  local id=$1
  pct config "$id" 2>/dev/null | awk -F'[=, ]' '/^net0:/{for(i=1;i<=NF;i++) if($i=="ip"){print $(i+1)}}'
}

# Is IP already in use by any LXC config we manage?
ip_used_by_cts() {
  local ip=$1
  while read -r id _; do
    [[ "$id" =~ ^[0-9]+$ ]] || continue
    local nip; nip=$(ct_ip "$id")
    [[ "$nip" == "$ip"/* ]] && return 0
  done < <(pct list | awk 'NR>1{print $1}')
  return 1
}

# Next free host IP starting from SEED in that subnet (skips network & broadcast)
next_free_ip() { # $1=seed_ip $2=prefix
  local seed=$1 pfx=$2
  local net=$(network_of "$seed" "$pfx")
  local bcast=$(broadcast_of "$seed" "$pfx")
  local cur_int=$(( $(ip_to_int "$seed") ))
  local bcast_int=$(( $(ip_to_int "$bcast") ))
  # ensure start >= first host
  local first=$(first_host "$seed" "$pfx")
  local first_int=$(( $(ip_to_int "$first") ))
  (( cur_int < first_int )) && cur_int=$first_int

  while (( cur_int < bcast_int )); do
    local candidate=$(int_to_ip "$cur_int")
    if ! ip_used_by_cts "$candidate"; then
      echo "$candidate"; return 0
    fi
    ((cur_int++))
  done
  return 1
}

# Template persistence & discovery
installed_templates() {
  local storages; storages=$(pvesm status 2>/dev/null | awk '$2=="dir"{print $1}')
  local s
  for s in $storages; do
    pveam list "$s" 2>/dev/null | awk -v S="$s" 'NR>1 && $2!="" {printf "%s:vztmpl/%s
", S, $2}'
  done
}

set_config_var() { # $1=KEY $2=VALUE
  local key="$1" val="$2"
  if grep -q "^${key}=" "$CONFIG_FILE" 2>/dev/null; then
    sed -i "s#^${key}=.*#${key}=\"${val//\//\/}\"#" "$CONFIG_FILE"
  else
    printf '%s="%s"
' "$key" "$val" >> "$CONFIG_FILE"
  fi
}

# Optional non-interactive flags for automation
EDITION=""; VERSION=""; HN=""; MEM=""; CORES=""; BKT=""; CTID_IN=""; PORT_IN=""; TEMPLATE_IN=""
while [[ ${1:-} == --* ]]; do
  case "$1" in
    --edition)       EDITION=${2:?}; shift 2;;
    --version)       VERSION=${2:?}; shift 2;;
    --hostname)      HN=${2:?}; shift 2;;
    --mem)           MEM=${2:?}; shift 2;;
    --cores)         CORES=${2:?}; shift 2;;
    --backup-hhmm)   BKT=${2:?}; shift 2;;
    --ctid)          CTID_IN=${2:?}; shift 2;;
    --port)          PORT_IN=${2:?}; shift 2;;
    --template)      TEMPLATE_IN=${2:?}; shift 2;;
    --) shift; break;;
    *) err "Unknown flag: $1"; exit 1;;
  esac
done

# ----- Static IPv4 assignment (no DHCP) -----
if [[ "$EDITION" == "Java" ]]; then
  IPV4_SEED="${NET_JAVA_START}"
  IPV4_PFX="${NET_JAVA_PREFIX:-24}"
  if [[ "${NET_JAVA_GW:-auto}" == "auto" || -z "${NET_JAVA_GW:-}" ]]; then
    IPV4_GW="$(first_host "$IPV4_SEED" "$IPV4_PFX")"
    # common case: force .1 if /24 and seed not .1 subnet
    [[ "$IPV4_PFX" == "24" ]] && IPV4_GW="$(echo "$IPV4_SEED" | awk -F. '{printf "%d.%d.%d.1",$1,$2,$3}')"
  else
    IPV4_GW="$NET_JAVA_GW"
  fi
else
  IPV4_SEED="${NET_BEDROCK_START}"
  IPV4_PFX="${NET_BEDROCK_PREFIX:-24}"
  if [[ "${NET_BEDROCK_GW:-auto}" == "auto" || -z "${NET_BEDROCK_GW:-}" ]]; then
    IPV4_GW="$(first_host "$IPV4_SEED" "$IPV4_PFX")"
    [[ "$IPV4_PFX" == "24" ]] && IPV4_GW="$(echo "$IPV4_SEED" | awk -F. '{printf "%d.%d.%d.1",$1,$2,$3}')"
  else
    IPV4_GW="$NET_BEDROCK_GW"
  fi
fi

IPV4_ADDR="$(next_free_ip "$IPV4_SEED" "$IPV4_PFX")" || {
  err "No free IPs available in $(network_of "$IPV4_SEED" "$IPV4_PFX")/$IPV4_PFX"
}


echo "=== Minecraft Server Setup ==="

# --- helpers ---
ctid_exists() { pct config "$1" >/dev/null 2>&1; }
port_in_use_host() { ss -ltn 2>/dev/null | awk '{print $4}' | grep -q ":$1$"; }
seed_port() { [[ ${1:-Java} == Bedrock ]] && echo 19132 || echo 25565; }

next_free_ctid_port() {
  local start=$1
  local p=$start
  while :; do
    if ! ctid_exists "$p" && ! port_in_use_host "$p"; then
      echo "$p"; return 0
    fi
    p=$((p+1))
    (( p <= 65535 )) || { err "No free CTID/port found above $start"; return 1; }
  done
}

select_template() {
  local list; list=$(installed_templates)
  [[ -n "$list" ]] || { err "No installed templates found. Use 'pveam download local <name>' first."; exit 1; }

  echo "Installed templates:";
  local arr=(); local i=1
  while read -r t; do arr+=("$t"); echo "  $i) $t"; i=$((i+1)); done <<< "$list"
  echo

  # Default from config if present and matches; otherwise first entry
  local default="${DEFAULT_TEMPLATE:-}"
  local def_idx=""
  if [[ -n "$default" ]]; then
    for idx in "${!arr[@]}"; do [[ "${arr[$idx]}" == "$default" ]] && def_idx=$((idx+1)); done
  fi
  if [[ -z "$def_idx" ]]; then default="${arr[0]}"; def_idx=1; fi

  local choice sel
  read -r -p "Choose template [${def_idx}]: " choice
  if [[ -z "$choice" ]]; then
    sel="$default"
  elif [[ "$choice" =~ ^[0-9]+$ ]]; then
    sel="${arr[$((choice-1))]}"
  else
    # allow typing full storage:path
    sel="$choice"
  fi

  # Persist for next time
  set_config_var DEFAULT_TEMPLATE "$sel"
  echo "$sel"
}

# Edition
if [[ -z "$EDITION" ]]; then
  read -r -p "Server Edition [Java]: " EDITION
  EDITION=${EDITION:-Java}
fi
if [[ $EDITION != "Java" && $EDITION != "Bedrock" ]]; then
  err "Edition must be 'Java' or 'Bedrock'"; exit 1
fi

# Version
if [[ -z "$VERSION" ]]; then
  read -r -p "Minecraft Version [Latest]: " VERSION
  VERSION=${VERSION:-Latest}
fi

# Memory
if [[ -z "$MEM" ]]; then
  read -r -p "Memory (MB) [4096]: " MEM
  MEM=${MEM:-4096}
fi
[[ "$MEM" =~ ^[0-9]+$ ]] || { err "Memory must be numeric (MB)"; exit 1; }

# Cores
if [[ -z "$CORES" ]]; then
  read -r -p "CPU cores [2]: " CORES
  CORES=${CORES:-2}
fi
[[ "$CORES" =~ ^[0-9]+$ ]] || { err "Cores must be numeric"; exit 1; }

# Backup HHMM
if [[ -z "$BKT" ]]; then
  while true; do
    read -r -p "Daily backup time (HHMM, 24h) [0400]: " BKT
    BKT=${BKT:-0400}
    if validate_hhmm "$BKT"; then break; else warn "Invalid HHMM. Try again."; fi
  done
else
  validate_hhmm "$BKT" || { err "Invalid --backup-hhmm (use HHMM)"; exit 1; }
fi

# --- Auto CTID/Port selection (CTID=Port enforced) ---
if [[ -n "$CTID_IN" || -n "$PORT_IN" ]]; then
  [[ -z "$CTID_IN" ]] && CTID_IN=$PORT_IN
  [[ -z "$PORT_IN" ]] && PORT_IN=$CTID_IN
  [[ "$CTID_IN" == "$PORT_IN" ]] || { err "CTID and Port must match (CTID=Port policy)."; exit 1; }
  [[ "$CTID_IN" =~ ^[0-9]+$ ]] || { err "CTID/Port must be numeric"; exit 1; }
  (( CTID_IN >= 1 && CTID_IN <= 65535 )) || { err "CTID/Port must be 1-65535"; exit 1; }
  ctid_exists "$CTID_IN" && { err "CTID $CTID_IN already exists"; exit 1; }
  port_in_use_host "$PORT_IN" && { err "Port $PORT_IN is in use on host"; exit 1; }
  CTID=$CTID_IN; PORT=$PORT_IN
else
  SEED=$(seed_port "$EDITION")
  PICK=$(next_free_ctid_port "$SEED")
  CTID=$PICK; PORT=$PICK
fi

# Hostname (default ties to CTID/Port)
if [[ -z "$HN" ]]; then
  read -r -p "Hostname [mc-$CTID]: " HN
  HN=${HN:-mc-$CTID}
fi

# Template selection (installed-only; persists to config)
if [[ -z "$TEMPLATE_IN" ]]; then
  TEMPLATE=$(select_template)
else
  TEMPLATE=$TEMPLATE_IN
  set_config_var DEFAULT_TEMPLATE "$TEMPLATE"
fi

info "Summary"
echo "CTID:      $CTID"
echo "Hostname:  $HN"
echo "Edition:   $EDITION"
echo "Version:   $VERSION"
echo "Memory:    ${MEM}MB"
echo "Cores:     $CORES"
echo "IPv4:      ${IPV4_ADDR}/${IPV4_PFX}  gw ${IPV4_GW}"
echo "Port:      $PORT"
echo "Template:  $TEMPLATE"
echo "Autostart: Yes (always)"
echo "Backups:   Daily @ ${BKT:0:2}:${BKT:2:2}"

# --- Create LXC using selected template ---
STOR=$(pvesh get /storage 2>/dev/null | awk '/local-lvm/{print $2}' | head -n1)
STOR=${STOR:-local}

info "Creating container CT $CTID..."
pct create "$CTID" "$TEMPLATE" \
  -hostname "$HN" \
  -cores "$CORES" \
  -memory "$MEM" \
  -swap 0 \
  -net0 "name=eth0,bridge=${BRIDGE},ip=${IPV4_ADDR}/${IPV4_PFX},gw=${IPV4_GW}" \
  -rootfs "$STOR:${DISK_GB}" \
  -unprivileged 1 \
  -onboot 1

info "Starting CT $CTID..."; pct start "$CTID"

if [[ $EDITION == "Java" ]]; then
  info "Installing Java and server jar (as mcadmin)..."
  pct exec "$CTID" -- bash -lc '
    set -e
    apt-get update
    apt-get install -y openjdk-21-jre-headless curl screen
    id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
    install -d -o mcadmin -g mcadmin /opt/minecraft
    cd /opt/minecraft
    curl -fsSL -o server.jar https://launcher.mojang.com/v1/objects/fe9f03f1f2b44f2d6a6f1a/server.jar || true
    echo "eula=true" > /opt/minecraft/eula.txt
    chown -R mcadmin:mcadmin /opt/minecraft
  '

  info "Creating start script and service (runs as mcadmin)..."
  pct exec "$CTID" -- bash -lc 'cat >/usr/local/bin/mc-start << EOS
#!/usr/bin/env bash
set -e
cd /opt/minecraft
# keep session name "mc" for compatibility with tooling
su -s /bin/bash - mcadmin -c "screen -dmS mc java -Xms512M -Xmx${MEM}M -jar server.jar nogui"
EOS
chmod +x /usr/local/bin/mc-start'

  pct exec "$CTID" -- bash -lc 'cat >/etc/systemd/system/minecraft.service << "EOF"
[Unit]
Description=Minecraft Server
After=network.target

[Service]
Type=forking
User=root
ExecStart=/usr/local/bin/mc-start
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF'

  pct exec "$CTID" -- systemctl enable minecraft.service

else
  info "Setting up Bedrock (as mcadmin; beta minimal)"
  pct exec "$CTID" -- bash -lc '
    set -e
    apt-get update
    apt-get install -y unzip curl screen
    id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
    install -d -o mcadmin -g mcadmin /opt/bedrock
    cd /opt/bedrock
    # Find the official direct ZIP link from the download page
BEDROCK_URL=$(curl -fsSL https://www.minecraft.net/en-us/download/server/bedrock \
  | grep -oE "https://minecraft\.azureedge\.net/bin-linux/bedrock-server-[0-9\.]+\.zip" \
  | head -n1)
if [[ -z "$BEDROCK_URL" ]]; then
  echo "Failed to detect Bedrock server URL" >&2; exit 1
fi
curl -fsSL -o bedrock-server.zip "$BEDROCK_URL"
    unzip -o bedrock-server.zip
    chown -R mcadmin:mcadmin /opt/bedrock
  '
  # TODO: create a systemd service similar to Java that starts Bedrock as mcadmin
fi

# --- Backups via host cron (vzdump) ---
H=${BKT:0:2}; M=${BKT:2:2}
CRONFILE="/etc/cron.d/mc-server-${CTID}"
echo "$M $H * * * root /usr/bin/mc backup $CTID" > "$CRONFILE"
chmod 0644 "$CRONFILE"

info "Done! Use: mc start $CTID | mc logs $CTID | mc console $CTID | mc backup $CTID | mc list"
