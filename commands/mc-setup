#!/usr/bin/env bash
# mc-setup â€” create and configure a Minecraft server LXC on Proxmox
# - Java: installs official Mojang vanilla server.jar
# - Bedrock: downloads the official azureedge ZIP
# - Networking: static IPv4 per edition, auto-picks first free IP in subnet
# - CTID policy: CTID == host port (Java 25565+, Bedrock 19132+)
# - Templates: selected via helper (mc-select-template), saved as DEFAULT_TEMPLATE

# Always run under bash even if invoked via sh
if [ -z "${BASH_VERSION:-}" ]; then exec /usr/bin/env bash "$0" "$@"; fi
set -euo pipefail

# --- Common / config ---
. /usr/share/mc-server-tools/lib/common.sh
require_root

CONFIG_FILE="/etc/mc-server-tools/config"
if [[ ! -f "$CONFIG_FILE" ]]; then
  install -d -m 0755 /etc/mc-server-tools
  cat >"$CONFIG_FILE" <<'EOF'
BRIDGE="vmbr0"
NET_JAVA_START="192.168.205.100"
NET_JAVA_PREFIX="24"
NET_JAVA_GW="auto"
NET_BEDROCK_START="192.168.206.100"
NET_BEDROCK_PREFIX="24"
NET_BEDROCK_GW="auto"
DEFAULT_TEMPLATE=""
EOF
fi
# shellcheck disable=SC1090
. "$CONFIG_FILE"

# Default disk size in GiB (integer, no suffix)
: "${DISK_GB:=16}"

# --- Config helper ---
set_config_var() { # $1=KEY $2=VALUE
  local key="$1" val="$2"
  if grep -q "^${key}=" "$CONFIG_FILE" 2>/dev/null; then
    sed -i "s#^${key}=.*#${key}=\"${val//\//\/}\"#" "$CONFIG_FILE"
  else
    printf '%s="%s"\n' "$key" "$val" >> "$CONFIG_FILE"
  fi
}

validate_numeric() { [[ "$1" =~ ^[0-9]+$ ]]; }

# --- IPv4 helpers ---
ip_to_int(){ IFS=. read -r a b c d <<<"$1"; echo $(( (a<<24) | (b<<16) | (c<<8) | d )); }
int_to_ip(){ local n=$1; printf '%d.%d.%d.%d' $(((n>>24)&255)) $(((n>>16)&255)) $(((n>>8)&255)) $((n&255)); }
mask_from_prefix(){ local p=$1; echo $(( (0xFFFFFFFF << (32-p)) & 0xFFFFFFFF )); }
network_of(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); int_to_ip $(( ipi & m )); }
first_host(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); int_to_ip $(( (ipi & m) + 1 )); }
broadcast_of(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); local b=$(( (ipi & m) | ((1 << (32-p)) - 1) )); int_to_ip "$b"; }

ct_ip(){
  local id=$1
  pct config "$id" 2>/dev/null | awk -F'[=, ]' '/^net0:/{for(i=1;i<=NF;i++) if($i=="ip"){print $(i+1)}}'
}

ip_used_by_cts(){ # $1=ip
  local ip="$1"
  local id nip
  while read -r id; do
    [[ "$id" =~ ^[0-9]+$ ]] || continue
    nip=$(ct_ip "$id")
    [[ "$nip" == "$ip"/* ]] && return 0
  done <<EOF
$(pct list | awk 'NR>1{print $1}')
EOF
  return 1
}

# ----- Flags -----
EDITION=""; VERSION=""; HN=""; MEM=""; CORES=""; BKT=""; CTID_IN=""; PORT_IN=""; TEMPLATE_IN=""
while [[ ${1:-} == --* ]]; do
  case "$1" in
    --edition)       EDITION=${2:?}; shift 2;;
    --version)       VERSION=${2:?}; shift 2;;
    --hostname)      HN=${2:?}; shift 2;;
    --mem)           MEM=${2:?}; shift 2;;
    --cores)         CORES=${2:?}; shift 2;;
    --backup-hhmm)   BKT=${2:?}; shift 2;;
    --ctid)          CTID_IN=${2:?}; shift 2;;
    --port)          PORT_IN=${2:?}; shift 2;;
    --template)      TEMPLATE_IN=${2:?}; shift 2;;
    --) shift; break;;
    *) err "Unknown flag: $1"; exit 1;;
  esac
done

# ----- Stat
