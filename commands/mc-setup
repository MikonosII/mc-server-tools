#!/usr/bin/env bash
set -euo pipefail

. /usr/share/mc-server-tools/lib/common.sh
require_root

LAST_TEMPLATE_FILE="/var/lib/mc-server-tools/last-template"
mkdir -p /var/lib/mc-server-tools

# Optional non-interactive flags for automation
EDITION=""; VERSION=""; HN=""; MEM=""; CORES=""; BKT=""; CTID_IN=""; PORT_IN=""; TEMPLATE_IN=""
while [[ ${1:-} == --* ]]; do
  case "$1" in
    --edition)       EDITION=${2:?}; shift 2;;
    --version)       VERSION=${2:?}; shift 2;;
    --hostname)      HN=${2:?}; shift 2;;
    --mem)           MEM=${2:?}; shift 2;;
    --cores)         CORES=${2:?}; shift 2;;
    --backup-hhmm)   BKT=${2:?}; shift 2;;
    --ctid)          CTID_IN=${2:?}; shift 2;;
    --port)          PORT_IN=${2:?}; shift 2;;
    --template)      TEMPLATE_IN=${2:?}; shift 2;;
    --) shift; break;;
    *) err "Unknown flag: $1"; exit 1;;
  esac
done

echo "=== Minecraft Server Setup ==="

# --- helpers ---
ctid_exists() { pct config "$1" >/dev/null 2>&1; }
port_in_use_host() { ss -ltn 2>/dev/null | awk '{print $4}' | grep -q ":$1$"; }
seed_port() { [[ ${1:-Java} == Bedrock ]] && echo 19132 || echo 25565; }

next_free_ctid_port() {
  local start=$1
  local p=$start
  while :; do
    if ! ctid_exists "$p" && ! port_in_use_host "$p"; then
      echo "$p"; return 0
    fi
    p=$((p+1))
    (( p <= 65535 )) || { err "No free CTID/port found above $start"; return 1; }
  done
}

select_template() {
  local templates
  templates=$(pveam available --section system | awk '{print $2}')
  [[ -z "$templates" ]] && { err "No templates found. Use 'pveam download' first."; exit 1; }

  local default=""
  [[ -f "$LAST_TEMPLATE_FILE" ]] && default=$(cat "$LAST_TEMPLATE_FILE")

  echo "Available templates:"
  local i=1
  local arr=()
  while read -r t; do arr+=("$t"); echo "  $i) $t"; i=$((i+1)); done <<< "$templates"
  echo

  local choice
  read -r -p "Choose template [${default:-1}]: " choice

  if [[ -z "$choice" ]]; then
    if [[ -n "$default" ]]; then TEMPLATE="$default"; else TEMPLATE="${arr[0]}"; fi
  elif [[ "$choice" =~ ^[0-9]+$ ]]; then
    TEMPLATE="${arr[$((choice-1))]}"
  else
    TEMPLATE="$choice"
  fi

  echo "$TEMPLATE" > "$LAST_TEMPLATE_FILE"
}

# Edition
if [[ -z "$EDITION" ]]; then
  read -r -p "Server Edition [Java]: " EDITION
  EDITION=${EDITION:-Java}
fi
if [[ $EDITION != "Java" && $EDITION != "Bedrock" ]]; then
  err "Edition must be 'Java' or 'Bedrock'"; exit 1
fi

# Version
if [[ -z "$VERSION" ]]; then
  read -r -p "Minecraft Version [Latest]: " VERSION
  VERSION=${VERSION:-Latest}
fi

# Memory
if [[ -z "$MEM" ]]; then
  read -r -p "Memory (MB) [4096]: " MEM
  MEM=${MEM:-4096}
fi
[[ "$MEM" =~ ^[0-9]+$ ]] || { err "Memory must be numeric (MB)"; exit 1; }

# Cores
if [[ -z "$CORES" ]]; then
  read -r -p "CPU cores [2]: " CORES
  CORES=${CORES:-2}
fi
[[ "$CORES" =~ ^[0-9]+$ ]] || { err "Cores must be numeric"; exit 1; }

# Backup HHMM
if [[ -z "$BKT" ]]; then
  while true; do
    read -r -p "Daily backup time (HHMM, 24h) [0400]: " BKT
    BKT=${BKT:-0400}
    if validate_hhmm "$BKT"; then break; else warn "Invalid HHMM. Try again."; fi
  done
else
  validate_hhmm "$BKT" || { err "Invalid --backup-hhmm (use HHMM)"; exit 1; }
fi

# --- Auto CTID/Port selection (CTID=Port enforced) ---
if [[ -n "$CTID_IN" || -n "$PORT_IN" ]]; then
  [[ -z "$CTID_IN" ]] && CTID_IN=$PORT_IN
  [[ -z "$PORT_IN" ]] && PORT_IN=$CTID_IN
  [[ "$CTID_IN" == "$PORT_IN" ]] || { err "CTID and Port must match (CTID=Port policy)."; exit 1; }
  [[ "$CTID_IN" =~ ^[0-9]+$ ]] || { err "CTID/Port must be numeric"; exit 1; }
  (( CTID_IN >= 1 && CTID_IN <= 65535 )) || { err "CTID/Port must be 1-65535"; exit 1; }
  ctid_exists "$CTID_IN" && { err "CTID $CTID_IN already exists"; exit 1; }
  port_in_use_host "$PORT_IN" && { err "Port $PORT_IN is in use on host"; exit 1; }
  CTID=$CTID_IN; PORT=$PORT_IN
else
  SEED=$(seed_port "$EDITION")
  PICK=$(next_free_ctid_port "$SEED")
  CTID=$PICK; PORT=$PICK
fi

# Hostname (default ties to CTID/Port)
if [[ -z "$HN" ]]; then
  read -r -p "Hostname [mc-$CTID]: " HN
  HN=${HN:-mc-$CTID}
fi

# Template selection
if [[ -z "$TEMPLATE_IN" ]]; then
  TEMPLATE=$(select_template)
else
  TEMPLATE=$TEMPLATE_IN
  echo "$TEMPLATE" > "$LAST_TEMPLATE_FILE"
fi

info "Summary"
echo "CTID:      $CTID"
echo "Hostname:  $HN"
echo "Edition:   $EDITION"
echo "Version:   $VERSION"
echo "Memory:    ${MEM}MB"
echo "Cores:     $CORES"
echo "Network:   Bridge (default)"
echo "Port:      $PORT (CTID=Port policy)"
echo "Template:  $TEMPLATE"
echo "Autostart: Yes (always)"
echo "Backups:   Daily @ ${BKT:0:2}:${BKT:2:2}"

# --- Create LXC using selected template ---
STOR=$(pvesh get /storage 2>/dev/null | awk '/local-lvm/{print $2}' | head -n1)
STOR=${STOR:-local}

info "Creating container CT $CTID..."
pct create "$CTID" "$TEMPLATE" \
  -hostname "$HN" \
  -cores "$CORES" \
  -memory "$MEM" \
  -swap 0 \
  -net0 "name=eth0,bridge=vmbr0,ip=dhcp" \
  -rootfs "$STOR:8" \
  -unprivileged 1 \
  -onboot 1

info "Starting CT $CTID..."; pct start "$CTID"

if [[ $EDITION == "Java" ]]; then
  info "Installing Java and server jar (as mcadmin)..."
  pct exec "$CTID" -- bash -lc '
    set -e
    apt-get update
    apt-get install -y openjdk-21-jre-headless curl screen
    id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
    install -d -o mcadmin -g mcadmin /opt/minecraft
    cd /opt/minecraft
    curl -fsSL -o server.jar https://launcher.mojang.com/v1/objects/fe9f03f1f2b44f2d6a6f1a/server.jar || true
    echo "eula=true" > /opt/minecraft/eula.txt
    chown -R mcadmin:mcadmin /opt/minecraft
  '

  info "Creating start script and service (runs as mcadmin)..."
  pct exec "$CTID" -- bash -lc 'cat >/usr/local/bin/mc-start << "EOS"
#!/usr/bin/env bash
set -e
cd /opt/minecraft
# keep session name "mc" for compatibility with tooling
su -s /bin/bash - mcadmin -c "screen -dmS mc java -Xms512M -Xmx${MEM}M -jar server.jar nogui"
EOS
chmod +x /usr/local/bin/mc-start'

  pct exec "$CTID" -- bash -lc 'cat >/etc/systemd/system/minecraft.service << "EOF"
[Unit]
Description=Minecraft Server
After=network.target

[Service]
Type=forking
User=root
ExecStart=/usr/local/bin/mc-start
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF'

  pct exec "$CTID" -- systemctl enable minecraft.service

else
  info "Setting up Bedrock (as mcadmin; beta minimal)"
  pct exec "$CTID" -- bash -lc '
    set -e
    apt-get update
    apt-get install -y unzip curl screen
    id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
    install -d -o mcadmin -g mcadmin /opt/bedrock
    cd /opt/bedrock
    curl -fsSL -o bedrock-server.zip https://minecraft.net/en-us/download/server/bedrock
    unzip -o bedrock-server.zip
    chown -R mcadmin:mcadmin /opt/bedrock
  '
  # TODO: create a systemd service similar to Java that starts Bedrock as mcadmin
fi

# --- Backups via host cron (vzdump) ---
H=${BKT:0:2}; M=${BKT:2:2}
CRONFILE="/etc/cron.d/mc-server-${CTID}"
echo "$M $H * * * root /usr/bin/mc backup $CTID" > "$CRONFILE"
chmod 0644 "$CRONFILE"

info "Done! Use: mc start $CTID | mc logs $CTID | mc console $CTID | mc backup $CTID | mc list"
