#!/usr/bin/env bash
# mc-setup â€” create and configure a Minecraft server LXC on Proxmox
# - Java: installs official Mojang vanilla server.jar
# - Bedrock: downloads the official azureedge ZIP
# - Networking: static IPv4 per edition, auto-picks first free IP in subnet
# - CTID policy: CTID == host port (Java 25565+, Bedrock 19132+)
# - Templates: selected via helper (mc-select-template), saved as DEFAULT_TEMPLATE

# Always run under bash even if invoked via sh
if [ -z "${BASH_VERSION:-}" ]; then exec /usr/bin/env bash "$0" "$@"; fi
set -euo pipefail

# --- Common / config ---
. /usr/share/mc-server-tools/lib/common.sh
require_root

CONFIG_FILE="/etc/mc-server-tools/config"
if [[ ! -f "$CONFIG_FILE" ]]; then
  install -d -m 0755 /etc/mc-server-tools
  cat >"$CONFIG_FILE" <<'EOF'
BRIDGE="vmbr0"
NET_JAVA_START="192.168.205.100"
NET_JAVA_PREFIX="24"
NET_JAVA_GW="auto"
NET_BEDROCK_START="192.168.206.100"
NET_BEDROCK_PREFIX="24"
NET_BEDROCK_GW="auto"
DEFAULT_TEMPLATE=""
EOF
fi
# shellcheck disable=SC1090
. "$CONFIG_FILE"

# Default disk size in GiB (integer, no suffix)
: "${DISK_GB:=16}"

# --- Config helper ---
set_config_var() { # $1=KEY $2=VALUE
  local key="$1" val="$2"
  if grep -q "^${key}=" "$CONFIG_FILE" 2>/dev/null; then
    sed -i "s#^${key}=.*#${key}=\"${val//\//\/}\"#" "$CONFIG_FILE"
  else
    printf '%s="%s"\n' "$key" "$val" >> "$CONFIG_FILE"
  fi
}

validate_numeric() { [[ "$1" =~ ^[0-9]+$ ]]; }
# Validate "HHMM" (24h)
validate_hhmm(){ [[ "$1" =~ ^([01][0-9]|2[0-3])[0-5][0-9]$ ]]; }


# --- IPv4 helpers ---
ip_to_int(){ IFS=. read -r a b c d <<<"$1"; echo $(( (a<<24) | (b<<16) | (c<<8) | d )); }
int_to_ip(){ local n=$1; printf '%d.%d.%d.%d' $(((n>>24)&255)) $(((n>>16)&255)) $(((n>>8)&255)) $((n&255)); }
mask_from_prefix(){ local p=$1; echo $(( (0xFFFFFFFF << (32-p)) & 0xFFFFFFFF )); }
network_of(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); int_to_ip $(( ipi & m )); }
first_host(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); int_to_ip $(( (ipi & m) + 1 )); }
broadcast_of(){ local ip=$1 p=$2; local ipi=$(ip_to_int "$ip"); local m=$(mask_from_prefix "$p"); local b=$(( (ipi & m) | ((1 << (32-p)) - 1) )); int_to_ip "$b"; }

# Extract ip= value from a CT's net0, if present
ct_ip(){
  local id=$1
  pct config "$id" 2>/dev/null | awk -F'[=, ]' '/^net0:/{for(i=1;i<=NF;i++) if($i=="ip"){print $(i+1)}}'
}

ip_used_by_cts(){ # $1=ip
  local ip="$1"
  local id nip
  while read -r id; do
    [[ "$id" =~ ^[0-9]+$ ]] || continue
    nip=$(ct_ip "$id")
    [[ "$nip" == "$ip"/* ]] && return 0
  done <<EOF
$(pct list | awk 'NR>1{print $1}')
EOF
  return 1
}

# Next free host IP starting from SEED in that subnet (skips network & broadcast)
next_free_ip(){ # $1=seed_ip $2=prefix
  local seed=$1 pfx=$2
  local bcast; bcast=$(broadcast_of "$seed" "$pfx")
  local cur_int=$(( $(ip_to_int "$seed") ))
  local bcast_int=$(( $(ip_to_int "$bcast") ))
  local first; first=$(first_host "$seed" "$pfx")
  local first_int=$(( $(ip_to_int "$first") ))
  (( cur_int < first_int )) && cur_int=$first_int
  while (( cur_int < bcast_int )); do
    local candidate; candidate=$(int_to_ip "$cur_int")
    if ! ip_used_by_cts "$candidate"; then
      echo "$candidate"; return 0
    fi
    ((cur_int++))
  done
  return 1
}

# ----- Flags -----
EDITION=""; VERSION=""; HN=""; MEM=""; CORES=""; BKT=""; CTID_IN=""; PORT_IN=""; TEMPLATE_IN=""
while [[ ${1:-} == --* ]]; do
  case "$1" in
    --edition)       EDITION=${2:?}; shift 2;;
    --version)       VERSION=${2:?}; shift 2;;
    --hostname)      HN=${2:?}; shift 2;;
    --mem)           MEM=${2:?}; shift 2;;
    --cores)         CORES=${2:?}; shift 2;;
    --backup-hhmm)   BKT=${2:?}; shift 2;;
    --ctid)          CTID_IN=${2:?}; shift 2;;
    --port)          PORT_IN=${2:?}; shift 2;;
    --template)      TEMPLATE_IN=${2:?}; shift 2;;
    --) shift; break;;
    *) err "Unknown flag: $1"; exit 1;;
  esac
done

# ----- Static IPv4 assignment -----
if [[ "${EDITION:-Java}" == "Java" ]]; then
  IPV4_SEED="${NET_JAVA_START}"; IPV4_PFX="${NET_JAVA_PREFIX:-24}"
  if [[ "${NET_JAVA_GW:-auto}" == "auto" || -z "${NET_JAVA_GW:-}" ]]; then
    IPV4_GW="$(first_host "$IPV4_SEED" "$IPV4_PFX")"
    [[ "$IPV4_PFX" == "24" ]] && IPV4_GW="$(echo "$IPV4_SEED" | awk -F. '{printf "%d.%d.%d.1",$1,$2,$3}')"
  else IPV4_GW="$NET_JAVA_GW"; fi
else
  IPV4_SEED="${NET_BEDROCK_START}"; IPV4_PFX="${NET_BEDROCK_PREFIX:-24}"
  if [[ "${NET_BEDROCK_GW:-auto}" == "auto" || -z "${NET_BEDROCK_GW:-}" ]]; then
    IPV4_GW="$(first_host "$IPV4_SEED" "$IPV4_PFX")"
    [[ "$IPV4_PFX" == "24" ]] && IPV4_GW="$(echo "$IPV4_SEED" | awk -F. '{printf "%d.%d.%d.1",$1,$2,$3}')"
  else IPV4_GW="$NET_BEDROCK_GW"; fi
fi
IPV4_ADDR="$(next_free_ip "$IPV4_SEED" "$IPV4_PFX")" || {
  err "No free IPs available in $(network_of "$IPV4_SEED" "$IPV4_PFX")/$IPV4_PFX"; exit 1;
}

echo "Selected IPv4 address: ${IPV4_ADDR}/${IPV4_PFX}"
echo "Gateway: ${IPV4_GW}"

# Sanity check: make sure the gateway responds
if ! ping -c1 -W2 "$IPV4_GW" >/dev/null 2>&1; then
  warn "Gateway $IPV4_GW did not respond to ping. The container may not have internet."
  read -r -p "Continue anyway? [y/N]: " yn
  case "$yn" in
    [Yy]*) ;;
    *) err "Aborting due to unreachable gateway"; exit 1;;
  esac
fi

echo "=== Minecraft Server Setup ==="

# ----- Simple helpers -----
ctid_exists(){ pct config "$1" >/dev/null 2>&1; }
 port_in_use_host(){
   local port="$1"
   if command -v ss >/dev/null 2>&1; then
     ss -ltn 2>/dev/null | awk '{print $4}' | grep -q ":${port}$"
   elif command -v netstat >/dev/null 2>&1; then
     netstat -ltn 2>/dev/null | awk '{print $4}' | grep -q ":${port}$"
   else
     warn "Neither ss nor netstat found; skipping host port check for ${port}"
     return 1
   fi
 }
seed_port(){ [[ ${1:-Java} == Bedrock ]] && echo 19132 || echo 25565; }

next_free_ctid_port() {
  local base="${1:-}"
  if [[ -z "$base" ]]; then
    err "Internal: next_free_ctid_port requires a start port"; return 1
  fi
  local p="$base"
  while :; do
    if ! ctid_exists "$p" && ! port_in_use_host "$p"; then
      echo "$p"; return 0
    fi
    p=$((p+1))
    if (( p > 65535 )); then
      err "No free CTID/port found above $base"; return 1
    fi
  done
}

# Edition
if [[ -z "$EDITION" ]]; then read -r -p "Server Edition [Java]: " EDITION; EDITION=${EDITION:-Java}; fi
if [[ $EDITION != "Java" && $EDITION != "Bedrock" ]]; then err "Edition must be 'Java' or 'Bedrock'"; exit 1; fi

# Version
if [[ -z "$VERSION" ]]; then read -r -p "Minecraft Version [Latest]: " VERSION; VERSION=${VERSION:-Latest}; fi

# Memory
if [[ -z "$MEM" ]]; then read -r -p "Memory (MB) [4096]: " MEM; MEM=${MEM:-4096}; fi
validate_numeric "$MEM" || { err "Memory must be numeric (MB)"; exit 1; }

# Cores
if [[ -z "$CORES" ]]; then read -r -p "CPU cores [2]: " CORES; CORES=${CORES:-2}; fi
validate_numeric "$CORES" || { err "Cores must be numeric"; exit 1; }

# Backup HHMM
if [[ -z "$BKT" ]]; then
  while true; do
    read -r -p "Daily backup time (HHMM, 24h) [0400]: " BKT
    BKT=${BKT:-0400}
    if validate_hhmm "$BKT"; then break; else warn "Invalid HHMM. Try again."; fi
  done
else
  validate_hhmm "$BKT" || { err "Invalid --backup-hhmm (use HHMM)"; exit 1; }
fi

# --- Auto CTID/Port selection (CTID=Port enforced) ---
if [[ -n "$CTID_IN" || -n "$PORT_IN" ]]; then
  [[ -z "$CTID_IN" ]] && CTID_IN=$PORT_IN
  [[ -z "$PORT_IN" ]] && PORT_IN=$CTID_IN
  [[ "$CTID_IN" == "$PORT_IN" ]] || { err "CTID and Port must match (CTID=Port policy)."; exit 1; }
  validate_numeric "$CTID_IN" || { err "CTID/Port must be numeric"; exit 1; }
  (( CTID_IN >= 1 && CTID_IN <= 65535 )) || { err "CTID/Port must be 1-65535"; exit 1; }
  ctid_exists "$CTID_IN" && { err "CTID $CTID_IN already exists"; exit 1; }
  port_in_use_host "$PORT_IN" && { err "Port $PORT_IN is in use on host"; exit 1; }
  CTID=$CTID_IN; PORT=$PORT_IN
else
  SEED=$(seed_port "$EDITION"); PICK=$(next_free_ctid_port "$SEED"); CTID=$PICK; PORT=$PICK
fi

# Hostname (default: MC-<Edition>-<CTID>, e.g. MC-Java-25565)
DEFAULT_HN="MC-${EDITION}-${CTID}"
if [[ -z "$HN" ]]; then
  read -r -p "Hostname [${DEFAULT_HN}]: " HN
  HN=${HN:-$DEFAULT_HN}
fi

# right before you call mc-select-template
[[ -x /usr/share/mc-server-tools/commands/mc-select-template ]] \
  || { err "mc-select-template helper not found (expected at /usr/share/mc-server-tools/commands/mc-select-template)"; exit 1; }


# --- Template selection via helper (no default unless saved & valid) ---
TEMPLATE="$(
  /usr/bin/env bash /usr/share/mc-server-tools/commands/mc-select-template \
    --template "${TEMPLATE_IN:-}" \
    --default  "${DEFAULT_TEMPLATE:-}"
)"
set_config_var DEFAULT_TEMPLATE "$TEMPLATE"

[[ "$TEMPLATE" =~ :vztmpl/ ]] || { err "Template must look like storage:vztmpl/<file>, got: $TEMPLATE"; exit 1; }

# RootFS storage (prefer local-lvm, else local)
STOR=$(pvesm status 2>/dev/null | awk 'NR>1 && $1=="local-lvm"{print $1}' | head -n1)
STOR=${STOR:-local}

info "Summary"
echo "CTID:      $CTID"
echo "Hostname:  $HN"
echo "Edition:   $EDITION"
echo "Version:   $VERSION"
echo "Memory:    ${MEM}MB"
echo "Cores:     $CORES"
echo "IPv4:      ${IPV4_ADDR}/${IPV4_PFX}  gw ${IPV4_GW}"
echo "Port:      $PORT"
echo "Template:  $TEMPLATE"
echo "Disk:      ${DISK_GB}G on $STOR"
echo "Autostart: Yes (always)"
echo "Backups:   Daily @ ${BKT:0:2}:${BKT:2:2}"

info "Creating container CT $CTID..."
pct create "$CTID" "$TEMPLATE" \
  -hostname "$HN" \
  -cores "$CORES" \
  -memory "$MEM" \
  -swap 0 \
  -net0 "name=eth0,bridge=${BRIDGE},ip=${IPV4_ADDR}/${IPV4_PFX},gw=${IPV4_GW}" \
  -rootfs "$STOR:${DISK_GB}" \
  -unprivileged 1 \
  -onboot 1

info "Starting CT $CTID..."; pct start "$CTID"

# Sanity check: gateway ping from inside the CT
info "Checking gateway $IPV4_GW from inside CT $CTID..."
if ! pct exec "$CTID" -- ping -c1 -W2 "$IPV4_GW" >/dev/null 2>&1; then
  warn "Inside CT $CTID: gateway $IPV4_GW did not respond to ping."
  warn "Networking may not work (apt-get could hang)."
  read -r -p "Continue anyway? [y/N]: " yn
  case "$yn" in
    [Yy]*) ;;
    *) err "Aborting due to unreachable gateway inside CT"; exit 1;;
  esac
else
  info "Gateway $IPV4_GW is reachable from inside CT $CTID"
fi

if [[ $EDITION == "Java" ]]; then
  info "Installing Java (official Mojang vanilla) and server jar (as mcadmin)..."
  pct exec "$CTID" -- env MC_VER="$VERSION" bash -lc '
  set -euo pipefail
  apt-get update
  apt-get install -y openjdk-21-jre-headless curl jq screen
  id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
  echo "mcadmin:changeme" | chpasswd
  install -d -o mcadmin -g mcadmin /opt/minecraft
  cd /opt/minecraft

  VER="${MC_VER:-Latest}"
  MANIFEST_JSON="$(curl -fsSL https://launchermeta.mojang.com/mc/game/version_manifest.json)"

  # Resolve "Latest" -> latest release id
  if [[ "$VER" =~ ^[Ll]atest$ ]]; then
    VER="$(printf "%s" "$MANIFEST_JSON" | jq -r '"'"'.latest.release'"'"')"
  fi

  # Find the per-version manifest URL (single quotes keep $v for jq, not the shell)
  MANIFEST_URL="$(printf "%s" "$MANIFEST_JSON" \
    | jq -r --arg v "$VER" '"'"'.versions[] | select(.id==$v) | .url'"'"' \
    | head -n1)"

  # If not found, fall back to latest release cleanly
  if [[ -z "${MANIFEST_URL:-}" || "$MANIFEST_URL" == "null" ]]; then
    echo "Requested version $VER not found; falling back to latest release" >&2
    VER="$(printf "%s" "$MANIFEST_JSON" | jq -r '"'"'.latest.release'"'"')"
    MANIFEST_URL="$(printf "%s" "$MANIFEST_JSON" \
      | jq -r --arg v "$VER" '"'"'.versions[] | select(.id==$v) | .url'"'"' \
      | head -n1)"
  fi

  if [[ -z "${MANIFEST_URL:-}" || "$MANIFEST_URL" == "null" ]]; then
    echo "Could not resolve a valid per-version manifest URL. Aborting." >&2
    exit 1
  fi

  JAR_URL="$(curl -fsSL "$MANIFEST_URL" | jq -r '"'"'.downloads.server.url'"'"')"
  if [[ -z "${JAR_URL:-}" || "$JAR_URL" == "null" ]]; then
    echo "Could not find server.jar URL in per-version manifest. Aborting." >&2
    exit 1
  fi

  curl -fSL -o server.jar "$JAR_URL"
  echo "eula=true" > eula.txt
  chown -R mcadmin:mcadmin /opt/minecraft
'

  info "Creating start script and service (runs as mcadmin)..."
  # Bake MEM into the script at creation time
  pct exec "$CTID" -- env MEM="$MEM" bash -lc 'cat >/usr/local/bin/mc-start << EOF
#!/usr/bin/env bash
set -e
cd /opt/minecraft
# keep session name "mc" for tooling compatibility
su -s /bin/bash - mcadmin -c "screen -dmS mc java -Xms512M -Xmx${MEM}M -jar server.jar nogui"
EOF
chmod +x /usr/local/bin/mc-start'

  pct exec "$CTID" -- bash -lc 'cat >/etc/systemd/system/minecraft.service << "EOF"
[Unit]
Description=Minecraft Server (Vanilla)
After=network-online.target
Wants=network-online.target

[Service]
Type=forking
User=root
ExecStart=/usr/local/bin/mc-start
ExecStop=/usr/bin/screen -S mc -p 0 -X stuff "stop^M"
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable minecraft.service
systemctl start minecraft.service'

else
  info "Setting up Bedrock (as mcadmin)"
  pct exec "$CTID" -- bash -lc '
    set -e
    apt-get update
    apt-get install -y unzip curl screen
    id -u mcadmin >/dev/null 2>&1 || useradd -m -s /bin/bash mcadmin
    echo "mcadmin:changeme" | chpasswd
    install -d -o mcadmin -g mcadmin /opt/bedrock
    cd /opt/bedrock
    BEDROCK_URL=$(curl -fsSL https://www.minecraft.net/en-us/download/server/bedrock | grep -oE "https://minecraft\.azureedge\.net/bin-linux/bedrock-server-[0-9\.]+\.zip" | head -n1)
    if [[ -z "$BEDROCK_URL" ]]; then echo "Failed to detect Bedrock server URL" >&2; exit 1; fi
    curl -fsSL -o bedrock-server.zip "$BEDROCK_URL"
    unzip -o bedrock-server.zip
    chown -R mcadmin:mcadmin /opt/bedrock
  '

  info "Creating start script and service (runs as mcadmin)..."
  pct exec "$CTID" -- bash -lc 'cat >/usr/local/bin/mc-start << "EOS"
#!/usr/bin/env bash
set -e
cd /opt/bedrock
# keep session name "mc" for tooling compatibility
su -s /bin/bash - mcadmin -c "cd /opt/bedrock; screen -dmS mc env LD_LIBRARY_PATH=. ./bedrock_server"
EOS
chmod +x /usr/local/bin/mc-start

cat >/etc/systemd/system/minecraft.service << "EOF"
[Unit]
Description=Minecraft Bedrock Server
After=network-online.target
Wants=network-online.target

[Service]
Type=forking
User=root
ExecStart=/usr/local/bin/mc-start
ExecStop=/usr/bin/screen -S mc -p 0 -X stuff "stop^M"
Restart=on-failure
RestartSec=5s
TimeoutStopSec=30s

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable minecraft.service
systemctl start minecraft.service'
fi

# --- Backups via host cron (vzdump) ---
H=${BKT:0:2}; M=${BKT:2:2}
CRONFILE="/etc/cron.d/mc-server-${CTID}"
echo "$M $H * * * root /usr/bin/mc backup $CTID" > "$CRONFILE"
chmod 0644 "$CRONFILE"

info "Done! Use: mc start $CTID | mc logs $CTID | mc console $CTID | mc stop $CTID | mc backup $CTID | mc list"
