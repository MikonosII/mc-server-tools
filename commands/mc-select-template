#!/usr/bin/env bash
# mc-select-template — pick or download a Debian/Ubuntu "standard" LXC template
# Prints the selected template path (e.g., local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst) to stdout.
# Non-interactive: accepts $MC_TEMPLATE or first CLI arg as a preselection; validates it exists or offers to download.

set -euo pipefail

# ---- config (can be overridden with env) ----
: "${MC_TEMPLATE_FILTER:=^(debian|ubuntu).*-standard_.*\.(tar\.(zst|xz)|tgz)$}"
: "${MC_DOWNLOAD_OS:=debian}"     # default when auto-downloading if none found (debian|ubuntu)
: "${MC_STORAGE_DEFAULT:=local}"  # default storage for downloads
: "${MC_NONINTERACTIVE:=0}"       # set to 1 to avoid prompts; will auto-download if needed

# ---- helpers ----
err(){ echo "[mc-select-template] ERROR: $*" >&2; }
warn(){ echo "[mc-select-template] WARN:  $*" >&2; }
info(){ echo "[mc-select-template] $*"; }

require_cmd(){ command -v "$1" >/dev/null 2>&1 || { err "Missing required command: $1"; exit 1; }; }

# ---- preflight ----
require_cmd pveam
require_cmd pvesm
require_cmd awk
require_cmd sed
require_cmd grep

# ---- read arg/preselection ----
PRESEL="${1:-${MC_TEMPLATE:-}}"

# Returns list of cached templates on all storages (format: storage:vztmpl/filename)
list_cached() {
  # pveam list <storage> shows cached items; enumerate storages that have vzdump/vztmpl volume types
  # We’ll query all storages and collect their cached templates.
  local s
  while read -r s; do
    pveam list "$s" 2>/dev/null || true
  done < <(pvesm status --verbose 2>/dev/null | awk 'NR>1 && $2 ~ /yes|active|available|enabled/ {print $1}')
}

# Filter to debian/ubuntu *standard* templates
filter_standard() {
  grep -Eo '^[[:alnum:]_:-]+:vztmpl/[[:graph:]]+' | awk '{print $1}' | awk -v RS='\r\n' '1' | grep -E "$MC_TEMPLATE_FILTER" || true
}

# Echo first available "standard" template name from remote catalog for a given OS
pick_remote_latest() {
  local os="${1:-debian}"
  # pveam available prints remote catalog; we take the last (usually latest) matching -standard for the OS
  pveam available 2>/dev/null | awk -v os="$os" '
    tolower($0) ~ os && tolower($0) ~ /standard/ {print $2}
  ' | sort -V | tail -n1
}

# Download template into storage
download_template() {
  local storage="$1" tmpl="$2"
  info "Downloading ${tmpl} into storage ${storage} (this may take a while)…"
  pveam update || true
  pveam download "$storage" "$tmpl"
}

# ---- If a template was preselected, validate or attempt download ----
if [[ -n "$PRESEL" ]]; then
  if [[ "$PRESEL" =~ :vztmpl/ ]]; then
    # Looks like a full storage:path reference — check it exists in cache
    if list_cached | grep -Fxq "$PRESEL"; then
      echo "$PRESEL"
      exit 0
    fi
    # If not cached, try to split into storage + filename and download it
    storage="${PRESEL%%:*}"
    file="${PRESEL#*:vztmpl/}"
    if [[ -n "$storage" && -n "$file" ]]; then
      download_template "$storage" "$file"
      echo "$PRESEL"
      exit 0
    fi
    err "Preselected template '$PRESEL' not found and could not infer download parts."
    exit 1
  else
    # Looks like just a filename; try to find it in any storage
    if found=$(list_cached | grep -E ":vztmpl/${PRESEL}$" | head -n1); then
      if [[ -n "$found" ]]; then
        echo "$found"
        exit 0
      fi
    fi
    # Try download into default storage
    download_template "$MC_STORAGE_DEFAULT" "$PRESEL"
    echo "${MC_STORAGE_DEFAULT}:vztmpl/${PRESEL}"
    exit 0
  fi
fi

# ---- Interactive or non-interactive selection from cached list ----
mapfile -t CACHED < <(list_cached | filter_standard | sort -V | uniq)

if [[ ${#CACHED[@]} -eq 0 ]]; then
  warn "No cached Debian/Ubuntu *standard* templates found."

  # If non-interactive, auto-pick latest from remote catalog and download
  if [[ "$MC_NONINTERACTIVE" == "1" ]]; then
    os="${MC_DOWNLOAD_OS}"
    tmpl="$(pick_remote_latest "$os")"
    [[ -n "$tmpl" ]] || { err "No remote $os standard template found in catalog."; exit 1; }
    download_template "$MC_STORAGE_DEFAULT" "$tmpl"
    echo "${MC_STORAGE_DEFAULT}:vztmpl/${tmpl}"
    exit 0
  fi

  # Interactive flow: offer update + download
  echo
  read -rp "Update template catalog now? [Y/n] " yn
  yn=${yn:-Y}
  if [[ "$yn" =~ ^[Yy]$ ]]; then
    pveam update || true
  fi

  echo
  echo "Select OS to download:"
  select os in "debian" "ubuntu" "quit"; do
    case "$os" in
      debian|ubuntu) break ;;
      quit) exit 1 ;;
      *) echo "Invalid choice." ;;
    esac
  done

  tmpl="$(pick_remote_latest "$os")"
  if [[ -z "$tmpl" ]]; then
    err "Could not find a '$os' *standard* template in the remote catalog."
    exit 1
  fi

  echo
  echo "Available storages:"
  mapfile -t STOR < <(pvesm status --verbose | awk 'NR>1 {print $1}')
  for i in "${!STOR[@]}"; do printf " [%d] %s\n" "$i" "${STOR[$i]}"; done
  read -rp "Choose storage for download [default: ${MC_STORAGE_DEFAULT}]: " sidx
  if [[ -n "${sidx:-}" && "$sidx" =~ ^[0-9]+$ && $sidx -ge 0 && $sidx -lt ${#STOR[@]} ]]; then
    storage="${STOR[$sidx]}"
  else
    storage="$MC_STORAGE_DEFAULT"
  fi

  download_template "$storage" "$tmpl"
  echo "${storage}:vztmpl/${tmpl}"
  exit 0
fi

# We have cached templates — present a menu
echo "Cached Debian/Ubuntu *standard* templates:"
for i in "${!CACHED[@]}"; do
  printf " [%d] %s\n" "$i" "${CACHED[$i]}"
done
echo " [d] Download a new template"
echo " [q] Quit"

# Non-interactive? pick the latest cached and return
if [[ "$MC_NONINTERACTIVE" == "1" ]]; then
  echo "${CACHED[-1]}"
  exit 0
fi

read -rp "Choose template index, or 'd' to download: " choice

case "$choice" in
  q|Q) exit 1 ;;
  d|D)
    # jump to the “no cached” branch behavior: update + choose OS + choose storage + download
    pveam update || true
    echo
    echo "Select OS to download:"
    select os in "debian" "ubuntu" "quit"; do
      case "$os" in
        debian|ubuntu) break ;;
        quit) exit 1 ;;
        *) echo "Invalid choice." ;;
      esac
    done
    tmpl="$(pick_remote_latest "$os")"
    [[ -n "$tmpl" ]] || { err "No remote $os standard template found."; exit 1; }
    echo
    echo "Available storages:"
    mapfile -t STOR < <(pvesm status --verbose | awk 'NR>1 {print $1}')
    for i in "${!STOR[@]}"; do printf " [%d] %s\n" "$i" "${STOR[$i]}"; done
    read -rp "Choose storage for download [default: ${MC_STORAGE_DEFAULT}]: " sidx
    if [[ -n "${sidx:-}" && "$sidx" =~ ^[0-9]+$ && $sidx -ge 0 && $sidx -lt ${#STOR[@]} ]]; then
      storage="${STOR[$sidx]}"
    else
      storage="$MC_STORAGE_DEFAULT"
    fi
    download_template "$storage" "$tmpl"
    echo "${storage}:vztmpl/${tmpl}"
    ;;
  ''|*[!0-9]*)
    err "Invalid choice: $choice"
    exit 1
    ;;
  *)
    idx="$choice"
    if [[ "$idx" -ge 0 && "$idx" -lt ${#CACHED[@]} ]]; then
      echo "${CACHED[$idx]}"
    else
      err "Index out of range."
      exit 1
    fi
    ;;
esac
