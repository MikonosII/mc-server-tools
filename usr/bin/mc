#!/usr/bin/env bash
# /usr/bin/mc â€” dispatcher for mc-server-tools (matches repo semantics)
# Subcommands are executed from: /usr/share/mc-server-tools/commands/mc-<subcommand>
# Known commands in repo: setup, new, copy, list, logs, console, start, stop, restart, backup, delete
# Special: `status` is handled inline (no mc-status file in repo)
#
# Debugging:
#   MC_TRACE=1 mc <cmd> ...    # shell trace
#
set -euo pipefail
[[ ${MC_TRACE:-0} == 1 ]] && set -x

# ---------- Common helpers ----------
if [[ -f /usr/share/mc-server-tools/lib/common.sh ]]; then
  # shellcheck disable=SC1091
  . /usr/share/mc-server-tools/lib/common.sh
else
  err(){ echo "ERROR: $*" >&2; }
  warn(){ echo "WARN:  $*" >&2; }
  info(){ echo "-- $*"; }
  require_root(){ [[ $EUID -eq 0 ]] || { err "Run as root (sudo -i)"; exit 1; }; }
fi

require_root

usage() {
  cat <<'USAGE'
mc-server-tools

Usage:
  mc setup [options]                # interactive setup (LXC + server install)
  mc new   [options]                # non-interactive create (if present)
  mc copy  <SRC_CTID> [flags...]    # clone server into a new CT (no "to/from")
  mc list                           # show servers and basic info
  mc status <CTID>                  # show service/screen status for a CT
  mc start  <CTID>
  mc stop   <CTID>
  mc restart <CTID>
  mc logs   <CTID> [N]              # tail service logs (default N=100/200 per script)
  mc console <CTID>                 # attach to screen session
  mc backup <CTID>                  # vzdump snapshot
  mc delete <CTID>                  # if implemented in repo

Notes:
  - Subcommands are dispatched to /usr/share/mc-server-tools/commands/mc-<subcommand>.
  - `mc copy` interface is exactly: mc copy <SRC_CTID> [--storage NAME] [--disk-gb N] [--mem N] [--cores N] [--backup-hhmm HHMM] [--version STR] [--template STORAGE:vztmpl/file]
USAGE
}

# Normalize the subcommand (strip CR / surrounding whitespace)
raw_cmd="${1:-}"
cmd="$(printf '%s' "$raw_cmd" | tr -d '\r' | awk '{$1=$1;print}')"
shift || true

# ---------- Inline helpers used by `status` ----------
ct_exists(){ pct config "$1" >/dev/null 2>&1; }
ct_status(){ pct status "$1" 2>/dev/null | awk '{print $2}'; }  # running|stopped
ct_running(){ [[ "$(ct_status "$1")" == "running" ]]; }
screen_present(){
  pct exec "$1" -- bash -lc 'screen -ls 2>/dev/null | grep -q "\.mc"' >/dev/null
}

# ---------- Dispatch ----------
case "${cmd:-help}" in
  ""|-h|--help|help)
    usage
    ;;

  status)
    id=${1:-}
    [[ -n "$id" ]] || { usage; exit 1; }
    ct_exists "$id" || { err "CTID $id not found"; exit 1; }
    s=$(ct_status "$id" || true)
    echo "CT $id: ${s:-unknown}"
    if ct_running "$id"; then
      if screen_present "$id"; then
        echo "  screen: mc (present)"
      else
        echo "  screen: not found"
      fi
      if pct exec "$id" -- systemctl is-active --quiet minecraft.service; then
        echo "  service: active"
      else
        echo "  service: inactive"
      fi
    fi
    ;;

  *)
    # Generic: look for matching command script in /usr/share/mc-server-tools/commands/
    script="/usr/share/mc-server-tools/commands/mc-${cmd}"
    if [[ -x "$script" ]]; then
      exec "$script" "$@"
    else
      err "Unknown subcommand: ${cmd}"
      usage
      exit 1
    fi
    ;;
esac
