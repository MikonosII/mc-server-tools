#!/usr/bin/env bash
set -Eeuo pipefail

BASE_DIR="$(dirname "$(readlink -f "$0")")/.."
SHARE_DIR="/usr/local/share/mc-server-tools"

# Prefer installed share; fallback to repo checkout
if [[ -d "$SHARE_DIR" ]]; then
  LIB_DIR="$SHARE_DIR/lib"
  SCRIPTS_DIR="$SHARE_DIR/scripts"
  SYSD_DIR="$SHARE_DIR/systemd"
  CFG_DIR="$SHARE_DIR/config"
else
  LIB_DIR="$BASE_DIR/lib"
  SCRIPTS_DIR="$BASE_DIR/scripts"
  SYSD_DIR="$BASE_DIR/systemd"
  CFG_DIR="$BASE_DIR/config"
fi

source "$LIB_DIR/common.sh"
source "$LIB_DIR/pve.sh"

usage() {
  cat <<EOF
mc â€” manage Minecraft servers on Proxmox (LXC)

Usage: mc <command> [args]

Commands:
  setup                 Create a new server container (interactive prompts)
  list                  List known servers
  start <name>          Start server
  stop <name>           Stop server
  restart <name>        Restart server
  status <name>         Show status
  update <name>         Update server software
  backup <name>         Make a world backup (in-container)
  destroy <name>        Remove container and metadata (with confirmation)
  help                  Show this help

Flags for non-interactive setup (override prompts):
  mc setup --type <java|bedrock> [--impl <paper|purpur>] \
           [--version <latest|1.xx.x>] --name <NAME> \
           [--memory MB --cores N --disk GB --bridge BR --storage STORE \
            --template TPL --timezone TZ] --yes

Examples:
  mc setup                # fully interactive
  mc setup --type java --name survival --memory 4096 --yes
EOF
}

cmd=${1:-help}
shift || true

case "$cmd" in
  help|-h|--help) usage ;;
  list)
    list_servers ;;
  setup)
    source "$CFG_DIR/defaults.env"
    source "$LIB_DIR/java.sh"
    source "$LIB_DIR/bedrock.sh"
    setup_server "$@" ;;
  start|stop|restart|status|update|backup)
    action="$cmd"; name="${1:-}"
    [[ -z "$name" ]] && die "Usage: mc $action <name>"
    load_server "$name"
    case "$action" in
      start)  pct start "$CTID" ;;
      stop)   pct stop "$CTID" ;;
      restart) pct restart "$CTID" ;;
      status)
        pct status "$CTID" || true
        pct exec "$CTID" -- systemctl --no-pager status "$SERVICE_NAME" || true ;;
      update)
        pct exec "$CTID" -- mc-serverctl update "$NAME" ;;
      backup)
        pct exec "$CTID" -- mc-serverctl backup "$NAME" ;;
    esac ;;
  destroy)
    name="${1:-}"
    [[ -z "$name" ]] && die "Usage: mc destroy <name>"
    load_server "$name"
    confirm "Really destroy server '$NAME' (CTID $CTID)? This cannot be undone." || exit 1
    pct stop "$CTID" || true
    pct destroy "$CTID"
    rm -f "/etc/mc-server-tools/servers/$NAME.env"
    echo "Destroyed '$NAME' (CTID $CTID) and removed metadata." ;;
  *)
    usage; exit 1 ;;
esac
